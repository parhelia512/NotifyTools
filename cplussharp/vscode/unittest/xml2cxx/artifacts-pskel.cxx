// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "artifacts-pskel.hxx"

// properties_pskel
//

void properties_pskel::
properties_parser (::properties1_pskel& p)
{
  this->properties_parser_ = &p;
}

void properties_pskel::
parsers (::properties1_pskel& properties)
{
  this->properties_parser_ = &properties;
}

properties_pskel::
properties_pskel ()
: properties_parser_ (0)
{
}

// repository_pskel
//

void repository_pskel::
mappings_parser (::mappings_pskel& p)
{
  this->mappings_parser_ = &p;
}

void repository_pskel::
artifacts_parser (::artifacts_pskel& p)
{
  this->artifacts_parser_ = &p;
}

void repository_pskel::
name_parser (::xml_schema::ncname_pskel& p)
{
  this->name_parser_ = &p;
}

void repository_pskel::
type_parser (::xml_schema::any_simple_type_pskel& p)
{
  this->type_parser_ = &p;
}

void repository_pskel::
version_parser (::xml_schema::integer_pskel& p)
{
  this->version_parser_ = &p;
}

void repository_pskel::
parsers (::properties1_pskel& properties,
         ::mappings_pskel& mappings,
         ::artifacts_pskel& artifacts,
         ::xml_schema::ncname_pskel& name,
         ::xml_schema::any_simple_type_pskel& type,
         ::xml_schema::integer_pskel& version)
{
  this->properties_parser_ = &properties;
  this->mappings_parser_ = &mappings;
  this->artifacts_parser_ = &artifacts;
  this->name_parser_ = &name;
  this->type_parser_ = &type;
  this->version_parser_ = &version;
}

repository_pskel::
repository_pskel ()
: mappings_parser_ (0),
  artifacts_parser_ (0),
  name_parser_ (0),
  type_parser_ (0),
  version_parser_ (0)
{
}

// mappings_pskel
//

void mappings_pskel::
rule_parser (::rule_pskel& p)
{
  this->rule_parser_ = &p;
}

void mappings_pskel::
size_parser (::xml_schema::integer_pskel& p)
{
  this->size_parser_ = &p;
}

void mappings_pskel::
parsers (::rule_pskel& rule,
         ::xml_schema::integer_pskel& size)
{
  this->rule_parser_ = &rule;
  this->size_parser_ = &size;
}

mappings_pskel::
mappings_pskel ()
: rule_parser_ (0),
  size_parser_ (0)
{
}

// rule_pskel
//

void rule_pskel::
filter_parser (::xml_schema::any_simple_type_pskel& p)
{
  this->filter_parser_ = &p;
}

void rule_pskel::
output_parser (::xml_schema::any_simple_type_pskel& p)
{
  this->output_parser_ = &p;
}

void rule_pskel::
parsers (::xml_schema::any_simple_type_pskel& filter,
         ::xml_schema::any_simple_type_pskel& output)
{
  this->filter_parser_ = &filter;
  this->output_parser_ = &output;
}

rule_pskel::
rule_pskel ()
: filter_parser_ (0),
  output_parser_ (0)
{
}

// artifacts_pskel
//

void artifacts_pskel::
artifact_parser (::artifact_pskel& p)
{
  this->artifact_parser_ = &p;
}

void artifacts_pskel::
size_parser (::xml_schema::integer_pskel& p)
{
  this->size_parser_ = &p;
}

void artifacts_pskel::
parsers (::artifact_pskel& artifact,
         ::xml_schema::integer_pskel& size)
{
  this->artifact_parser_ = &artifact;
  this->size_parser_ = &size;
}

artifacts_pskel::
artifacts_pskel ()
: artifact_parser_ (0),
  size_parser_ (0)
{
}

// artifact_pskel
//

void artifact_pskel::
classifier_parser (::xml_schema::ncname_pskel& p)
{
  this->classifier_parser_ = &p;
}

void artifact_pskel::
id_parser (::xml_schema::any_simple_type_pskel& p)
{
  this->id_parser_ = &p;
}

void artifact_pskel::
version_parser (::xml_schema::nmtoken_pskel& p)
{
  this->version_parser_ = &p;
}

void artifact_pskel::
parsers (::properties1_pskel& properties,
         ::xml_schema::ncname_pskel& classifier,
         ::xml_schema::any_simple_type_pskel& id,
         ::xml_schema::nmtoken_pskel& version)
{
  this->properties_parser_ = &properties;
  this->classifier_parser_ = &classifier;
  this->id_parser_ = &id;
  this->version_parser_ = &version;
}

artifact_pskel::
artifact_pskel ()
: classifier_parser_ (0),
  id_parser_ (0),
  version_parser_ (0)
{
}

// properties1_pskel
//

void properties1_pskel::
property_parser (::property_pskel& p)
{
  this->property_parser_ = &p;
}

void properties1_pskel::
size_parser (::xml_schema::integer_pskel& p)
{
  this->size_parser_ = &p;
}

void properties1_pskel::
parsers (::property_pskel& property,
         ::xml_schema::integer_pskel& size)
{
  this->property_parser_ = &property;
  this->size_parser_ = &size;
}

properties1_pskel::
properties1_pskel ()
: property_parser_ (0),
  size_parser_ (0)
{
}

// property_pskel
//

void property_pskel::
name_parser (::xml_schema::ncname_pskel& p)
{
  this->name_parser_ = &p;
}

void property_pskel::
value_parser (::xml_schema::integer_pskel& p)
{
  this->value_parser_ = &p;
}

void property_pskel::
parsers (::xml_schema::ncname_pskel& name,
         ::xml_schema::integer_pskel& value)
{
  this->name_parser_ = &name;
  this->value_parser_ = &value;
}

property_pskel::
property_pskel ()
: name_parser_ (0),
  value_parser_ (0)
{
}

// properties_pskel
//

void properties_pskel::
properties ()
{
}

void properties_pskel::
post_properties ()
{
}

bool properties_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "properties" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->properties_parser_;

    if (this->properties_parser_)
      this->properties_parser_->pre ();

    return true;
  }

  return false;
}

bool properties_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "properties" && ns.empty ())
  {
    if (this->properties_parser_)
    {
      this->properties_parser_->post_properties1 ();
      this->properties ();
    }

    return true;
  }

  return false;
}

// repository_pskel
//

void repository_pskel::
mappings ()
{
}

void repository_pskel::
artifacts ()
{
}

void repository_pskel::
name (const ::std::string&)
{
}

void repository_pskel::
type ()
{
}

void repository_pskel::
version (long long)
{
}

void repository_pskel::
post_repository ()
{
  post_properties ();
}

bool repository_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::properties_pskel::_start_element_impl (ns, n, t))
    return true;

  if (n == "mappings" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->mappings_parser_;

    if (this->mappings_parser_)
      this->mappings_parser_->pre ();

    return true;
  }

  if (n == "artifacts" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->artifacts_parser_;

    if (this->artifacts_parser_)
      this->artifacts_parser_->pre ();

    return true;
  }

  return false;
}

bool repository_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::properties_pskel::_end_element_impl (ns, n))
    return true;

  if (n == "mappings" && ns.empty ())
  {
    if (this->mappings_parser_)
    {
      this->mappings_parser_->post_mappings ();
      this->mappings ();
    }

    return true;
  }

  if (n == "artifacts" && ns.empty ())
  {
    if (this->artifacts_parser_)
    {
      this->artifacts_parser_->post_artifacts ();
      this->artifacts ();
    }

    return true;
  }

  return false;
}

bool repository_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::properties_pskel::_attribute_impl (ns, n, v))
    return true;

  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (v);
      this->name_parser_->_post_impl ();
      this->name (this->name_parser_->post_ncname ());
    }

    return true;
  }

  if (n == "type" && ns.empty ())
  {
    if (this->type_parser_)
    {
      this->type_parser_->pre ();
      this->type_parser_->_pre_impl ();
      this->type_parser_->_characters (v);
      this->type_parser_->_post_impl ();
      this->type_parser_->post_any_simple_type ();
      this->type ();
    }

    return true;
  }

  if (n == "version" && ns.empty ())
  {
    if (this->version_parser_)
    {
      this->version_parser_->pre ();
      this->version_parser_->_pre_impl ();
      this->version_parser_->_characters (v);
      this->version_parser_->_post_impl ();
      this->version (this->version_parser_->post_integer ());
    }

    return true;
  }

  return false;
}

// mappings_pskel
//

void mappings_pskel::
rule ()
{
}

void mappings_pskel::
size (long long)
{
}

void mappings_pskel::
post_mappings ()
{
}

bool mappings_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "rule" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->rule_parser_;

    if (this->rule_parser_)
      this->rule_parser_->pre ();

    return true;
  }

  return false;
}

bool mappings_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "rule" && ns.empty ())
  {
    if (this->rule_parser_)
    {
      this->rule_parser_->post_rule ();
      this->rule ();
    }

    return true;
  }

  return false;
}

bool mappings_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
    return true;

  if (n == "size" && ns.empty ())
  {
    if (this->size_parser_)
    {
      this->size_parser_->pre ();
      this->size_parser_->_pre_impl ();
      this->size_parser_->_characters (v);
      this->size_parser_->_post_impl ();
      this->size (this->size_parser_->post_integer ());
    }

    return true;
  }

  return false;
}

// rule_pskel
//

void rule_pskel::
filter ()
{
}

void rule_pskel::
output ()
{
}

void rule_pskel::
post_rule ()
{
}

bool rule_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
    return true;

  if (n == "filter" && ns.empty ())
  {
    if (this->filter_parser_)
    {
      this->filter_parser_->pre ();
      this->filter_parser_->_pre_impl ();
      this->filter_parser_->_characters (v);
      this->filter_parser_->_post_impl ();
      this->filter_parser_->post_any_simple_type ();
      this->filter ();
    }

    return true;
  }

  if (n == "output" && ns.empty ())
  {
    if (this->output_parser_)
    {
      this->output_parser_->pre ();
      this->output_parser_->_pre_impl ();
      this->output_parser_->_characters (v);
      this->output_parser_->_post_impl ();
      this->output_parser_->post_any_simple_type ();
      this->output ();
    }

    return true;
  }

  return false;
}

// artifacts_pskel
//

void artifacts_pskel::
artifact ()
{
}

void artifacts_pskel::
size (long long)
{
}

void artifacts_pskel::
post_artifacts ()
{
}

bool artifacts_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "artifact" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->artifact_parser_;

    if (this->artifact_parser_)
      this->artifact_parser_->pre ();

    return true;
  }

  return false;
}

bool artifacts_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "artifact" && ns.empty ())
  {
    if (this->artifact_parser_)
    {
      this->artifact_parser_->post_artifact ();
      this->artifact ();
    }

    return true;
  }

  return false;
}

bool artifacts_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
    return true;

  if (n == "size" && ns.empty ())
  {
    if (this->size_parser_)
    {
      this->size_parser_->pre ();
      this->size_parser_->_pre_impl ();
      this->size_parser_->_characters (v);
      this->size_parser_->_post_impl ();
      this->size (this->size_parser_->post_integer ());
    }

    return true;
  }

  return false;
}

// artifact_pskel
//

void artifact_pskel::
classifier (const ::std::string&)
{
}

void artifact_pskel::
id ()
{
}

void artifact_pskel::
version (const ::std::string&)
{
}

void artifact_pskel::
post_artifact ()
{
  post_properties ();
}

bool artifact_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::properties_pskel::_attribute_impl (ns, n, v))
    return true;

  if (n == "classifier" && ns.empty ())
  {
    if (this->classifier_parser_)
    {
      this->classifier_parser_->pre ();
      this->classifier_parser_->_pre_impl ();
      this->classifier_parser_->_characters (v);
      this->classifier_parser_->_post_impl ();
      this->classifier (this->classifier_parser_->post_ncname ());
    }

    return true;
  }

  if (n == "id" && ns.empty ())
  {
    if (this->id_parser_)
    {
      this->id_parser_->pre ();
      this->id_parser_->_pre_impl ();
      this->id_parser_->_characters (v);
      this->id_parser_->_post_impl ();
      this->id_parser_->post_any_simple_type ();
      this->id ();
    }

    return true;
  }

  if (n == "version" && ns.empty ())
  {
    if (this->version_parser_)
    {
      this->version_parser_->pre ();
      this->version_parser_->_pre_impl ();
      this->version_parser_->_characters (v);
      this->version_parser_->_post_impl ();
      this->version (this->version_parser_->post_nmtoken ());
    }

    return true;
  }

  return false;
}

// properties1_pskel
//

void properties1_pskel::
property ()
{
}

void properties1_pskel::
size (long long)
{
}

void properties1_pskel::
post_properties1 ()
{
}

bool properties1_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "property" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->property_parser_;

    if (this->property_parser_)
      this->property_parser_->pre ();

    return true;
  }

  return false;
}

bool properties1_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "property" && ns.empty ())
  {
    if (this->property_parser_)
    {
      this->property_parser_->post_property ();
      this->property ();
    }

    return true;
  }

  return false;
}

bool properties1_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
    return true;

  if (n == "size" && ns.empty ())
  {
    if (this->size_parser_)
    {
      this->size_parser_->pre ();
      this->size_parser_->_pre_impl ();
      this->size_parser_->_characters (v);
      this->size_parser_->_post_impl ();
      this->size (this->size_parser_->post_integer ());
    }

    return true;
  }

  return false;
}

// property_pskel
//

void property_pskel::
name (const ::std::string&)
{
}

void property_pskel::
value (long long)
{
}

void property_pskel::
post_property ()
{
}

bool property_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
    return true;

  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
    {
      this->name_parser_->pre ();
      this->name_parser_->_pre_impl ();
      this->name_parser_->_characters (v);
      this->name_parser_->_post_impl ();
      this->name (this->name_parser_->post_ncname ());
    }

    return true;
  }

  if (n == "value" && ns.empty ())
  {
    if (this->value_parser_)
    {
      this->value_parser_->pre ();
      this->value_parser_->_pre_impl ();
      this->value_parser_->_characters (v);
      this->value_parser_->_post_impl ();
      this->value (this->value_parser_->post_integer ());
    }

    return true;
  }

  return false;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

